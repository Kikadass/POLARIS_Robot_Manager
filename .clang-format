# Use the Google style in this project.
BasedOnStyle: Google

# Some folks prefer to write "int& foo" while others prefer "int &foo".  The
# Google Style Guide only asks for consistency within a project, we chose
# "int& foo" for this project:
DerivePointerAlignment: false
PointerAlignment: Left

# The Google Style Guide only asks for consistency w.r.t. "east const" vs.
# "const west" alignment of cv-qualifiers. In this project we use "const west".
QualifierAlignment: Left

IndentWidth: 2
ColumnLimit: 120
CompactNamespaces: true
NamespaceIndentation: All
AlignAfterOpenBracket: Align
#SpacesInParentheses: true
BinPackParameters: false
BinPackArguments: false
AllowAllParametersOfDeclarationOnNextLine: true
AllowAllArgumentsOnNextLine: true
PackConstructorInitializers: Never
AllowShortEnumsOnASingleLine: false
BreakBeforeBraces: Allman
BreakConstructorInitializers: BeforeComma
BreakBeforeBinaryOperators: NonAssignment
AlignOperands: AlignAfterOperator

IncludeBlocks: Regroup
IncludeCategories:
# The fist header will be the related header.
# In a .cpp file it will be the corresponding .hpp
# The following Regex matches #includes with "". Which should be the project headers
- Regex: '^\"'
  Priority: 1
# The following Regex matches #includes with / and end with .hpp.
# Which should be the 3rd party libraries
- Regex: '^<sword.*/.*\.hpp'
  Priority: 2
# The following Regex matches #includes with / and end with .hpp.
# Which should be the 3rd party libraries
- Regex: '^<shield.*/.*\.hpp'
  Priority: 3
# The following Regex matches #includes with / and end with .hpp.
# Which should be the 3rd party libraries
- Regex: '^<.*/.*\.hpp'
  Priority: 4
# The following Regex matches #includes ending with .h.
# Which should be the C headers
- Regex: '^<.*\.h>'
  Priority: 5
# The following Regex matches #includes ending without an extension.
# Which should be the C++ headers
- Regex: '^<.*(?!\.h)>'
  Priority: 6

SortIncludes: CaseInsensitive